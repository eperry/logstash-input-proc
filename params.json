{"name":"Logstash-input-proc","tagline":"A Logstash plugin to read the Linux Kernel /proc mount","body":"![](https://github.com/eperry/logstash-input-proc/wiki/MemInfoDashboard.png)\r\n\r\n# Logstash Plugin\r\n\r\nThis is a plugin for [Logstash](https://github.com/elasticsearch/logstash).\r\n\r\nThis plugin is to read the /proc virtual file system , decode the files in it.\r\nI am using the following pages for reference \r\n\r\n- http://man7.org/linux/man-pages/man5/proc.5.html\r\n\r\n\r\n\r\n\r\n## Documentation\r\n\r\n\r\n### 1. Plugin Developement and Testing\r\n\r\n#### Code\r\n- To get started, you'll need JRuby with the Bundler gem installed.\r\n ```sh\r\nbundle install\r\n```\r\n\r\n- Then clone this repo\r\n- You will need to either clone the logstash repo or download the binary\r\n\r\n\r\n\r\n### 2. Running the unpublished Plugin in Logstash\r\n\r\n#### 2.1 Run in a local Logstash clone\r\n\r\n- Edit Logstash `Gemfile` and add the local plugin path, for example:\r\n```ruby\r\ngem \"logstash-input-proc\", :path => \"/your/local/logstash-input-proc\"\r\n```\r\n- Install plugin\r\n```sh\r\nbin/plugin install --no-verify\r\n```\r\n- install Ruby Debug\r\n```sh\r\nbin/plugin install logstash-codec-rubydebug\r\n```\r\n- Run Logstash with your plugin\r\n```sh\r\nbin/logstash -e 'input {proc {interval=>60}}  output { stdout{ codec=>\"rubydebug\"}}'\r\n```\r\nAt this point any modifications to the plugin code will be applied to this local Logstash setup. After modifying the plugin, simply rerun Logstash.\r\n\r\n#### 2.2 Run in an installed Logstash\r\n\r\nYou can use the same **2.1** method to run your plugin in an installed Logstash by editing its `Gemfile` and pointing the `:path` to your local plugin development directory or you can build the gem and install it using:\r\n\r\n- Build your plugin gem\r\n```sh\r\ngem build logstash-output-proc.gemspec\r\n```\r\n- Install the plugin from the Logstash home\r\n```sh\r\nbin/plugin install /your/local/plugin/logstash-input-proc.gem\r\n```\r\n- Start Logstash and proceed to test the plugin\r\n- \r\n# Example Config all features enabled\r\n```ruby\r\ninput {\r\n    proc {\r\n        interval=>60\r\n        vmstats =>{ }\r\n        loadavg =>{ }\r\n        meminfo =>{ }\r\n        pidstats =>{ \r\n            user => \"root\"\r\n        }\r\n        \r\n    }\r\n}\r\n\r\noutput { \r\n    stdout{ \r\n        codec=>\"rubydebug\"\r\n    }\r\n}\r\n```\r\n#Example Minimal\r\n\r\n```ruby\r\ninput {\r\n    proc {\r\n        interval=>60\r\n        meminfo =>{ }\r\n    }\r\n}\r\n\r\noutput { \r\n    stdout{ \r\n        codec=>\"rubydebug\"\r\n    }\r\n}\r\n```\r\n\r\n## 3.0 Kibana Dashboards\r\n\r\nStill a work in progress but I have saved a copy of the Kibana 4.1 dashboards I have created\r\nin the ~/Kibana Directory, you should be able to import them from the Kibana->settings->Objects pages\r\n\r\nThese dashboards are right now a way of me validating the data loaded in elasticsearch is usable and provide an example for others to work off of. They work with the setup\r\nof elasticsearch as defined below.\r\n\r\n\r\n## 4.0 Elasticsearch Templates\r\n\r\nIn the ~/ElasitcSearch Directory are all the Elasticsearch templates I am developing to work with this plugin. \r\nWhile they may not be exactly what you need they are a good start. \r\n\r\nI load them via the ${ES_HOME/config/templates directory but feel free to load them in your preffered way \r\n\r\nThese templates are based on the fact that your indexes for the data are created like so:\r\n```\r\noutput { \r\n    elasticsearch { \r\n       host => localhost \r\n       index => \"%{type}-%{+YYYY.MM.dd}\"\r\n    }\r\n}\r\n```\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}